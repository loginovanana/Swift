import Foundation

// MARK: - Задание 1: enum с разным типом RawValue

// Enum с Int RawValue
enum HTTPCode: Int {
    case ok = 200
    case created = 201
    case notFound = 404
    case serverError = 500
}

// Enum со String RawValue
enum Direction: String {
    case north = "Север"
    case south = "Юг"
    case east = "Восток"
    case west = "Запад"
}

// MARK: - Задание 2: Enum для анкеты сотрудника

enum Gender: String {
    case male = "Мужской"
    case female = "Женский"
    case other = "Другой"
}

enum AgeCategory: String {
    case young = "18-25"
    case middleAged = "26-45"
    case senior = "46+"
}

enum Experience: Int {
    case newbie = 0
    case junior = 1
    case midLevel = 3
    case senior = 5
    case lead = 10
}

// Создание структуры "Анкета сотрудника"
struct EmployeeProfile {
    var name: String
    var gender: Gender
    var ageCategory: AgeCategory
    var experience: Experience
}

// MARK: - Задание 3: Enum для цветов радуги

enum RainbowColor: String, CaseIterable { // CaseIterable позволяет получить массив всех кейсов
    case red = "Красный"
    case orange = "Оранжевый"
    case yellow = "Желтый"
    case green = "Зеленый"
    case blue = "Голубой"
    case indigo = "Синий"
    case violet = "Фиолетовый"
}

// MARK: - Задание 4: Функция с массивом case'ов enum и выводом в консоль

func printRainbowColors(colors: [RainbowColor]) {
    for color in colors {
        print("\(color)") // Используется RawValue, так как RainbowColor: String
    }
}

// Создание массива цветов
let myColors: [RainbowColor] = [.red, .green, .blue]
print("\nЦвета радуги:")
printRainbowColors(colors: myColors) // Выведет "Красный", "Зеленый", "Голубой"

// MARK: - Задание 5: Функция для выставления оценок ученикам

enum Score: String {
    case excellent = "Отлично"
    case good = "Хорошо"
    case satisfactory = "Удовлетворительно"
    case poor = "Плохо"
    case fail = "Неудовлетворительно"
}

func getNumericScore(score: Score) -> Int {
    switch score {
    case .excellent:
        return 5
    case .good:
        return 4
    case .satisfactory:
        return 3
    case .poor:
        return 2
    case .fail:
        return 1
    }
}

// Пример использования функции
let studentScore: Score = .good
let numericValue = getNumericScore(score: studentScore)
print("\nОценка ученика \(studentScore.rawValue): \(numericValue)")

// MARK: - Задание 6: Метод, выводящий автомобили в гараже

enum CarBrand: String {
    case bmw = "BMW"
    case mercedes = "Mercedes-Benz"
    case audi = "Audi"
    case toyota = "Toyota"
}

class Garage {
    var cars: [CarBrand] = []

    func listCars() {
        if cars.isEmpty {
            print("\nВ гараже нет автомобилей.")
        } else {
            print("\nАвтомобили в гараже:")
            for car in cars {
                print("- \(car.rawValue)")
            }
        }
    }
}

// Пример использования класса Garage
let myGarage = Garage()
myGarage.cars = [.bmw, .mercedes, .toyota]
myGarage.listCars()